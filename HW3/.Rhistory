scenario3$TrainLag10[i] = ifelse(is.na(scenario3$Train[i-10]), scenario3$M4[i-10], scenario3$Train[i-10])
scenario3$TrainLag12[i] = ifelse(is.na(scenario3$Train[i-12]), scenario3$M4[i-12], scenario3$Train[i-12])
scenario3$TrainLag24[i] = ifelse(is.na(scenario3$Train[i-24]), scenario3$M4[i-24], scenario3$Train[i-24])
scenario3$M4[i] = predict(M4S3, newdata = scenario3[i,])
}
scenario3$M4residuals = scenario3$Variable - scenario3$M4
scenario3 %>% ggplot(aes(x = Date, y = Variable, color = Set))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M4), col = "black") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario3 %>% ggplot(aes(x = Date, y = M4residuals))+
geom_line() + theme_bw() +
geom_line(aes(x = Date, y = M4residuals), col = "blue") +
geom_hline(yintercept = 0) +
scale_x_date(date_labels = "%Y-%m-%d")
#EVALUATION: as we have demonstrated, the residuals of this model are noise. Hence,
# before digging in the metrics, this model is accurate enough
#Evaluation Metrics for Training Sets
RMSE_S1_train = c(sqrt(mean((scenario1$M0residuals[1:(dim(scenario1)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M1residuals[1:(dim(scenario1)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M2residuals[1:(dim(scenario1)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M3residuals[1:(dim(scenario1)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M4residuals[1:(dim(scenario1)[1]-12)])^2, na.rm = TRUE)))
MAPE_S1_train = c(mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M0[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M1[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M2[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M3[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M4[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)]), na.rm = TRUE))
RMSE_S2_train = c(sqrt(mean((scenario2$M0residuals[1:(dim(scenario2)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M1residuals[1:(dim(scenario2)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M2residuals[1:(dim(scenario2)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M3residuals[1:(dim(scenario2)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M4residuals[1:(dim(scenario2)[1]-12)])^2, na.rm = TRUE)))
MAPE_S2_train = c(mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M0[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M1[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M2[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M3[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M4[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)]), na.rm = TRUE))
RMSE_S3_train = c(sqrt(mean((scenario3$M0residuals[1:(dim(scenario3)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M1residuals[1:(dim(scenario3)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M2residuals[1:(dim(scenario3)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M3residuals[1:(dim(scenario3)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M4residuals[1:(dim(scenario3)[1]-12)])^2, na.rm = TRUE)))
MAPE_S3_train = c(mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M0[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M1[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M2[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M3[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M4[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)]), na.rm = TRUE))
#create evaluation table
accuracy.table0 = data.frame('S1 MAPE' = MAPE_S1_train,
'S2 MAPE' = MAPE_S2_train,
'S3 MAPE' = MAPE_S3_train)
at0 = as.matrix(accuracy.table0)
MAPE_AVG_train = c(rowMeans(at0))
MAPE_AVG_train
ModelID = paste("M", 0:4, sep = "")
accuracy.table0 = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1_train,
'S1 MAPE' = MAPE_S1_train,
'S2 RMSE' = RMSE_S2_train, 'S2 MAPE' = MAPE_S2_train,
'S3 RMSE' = RMSE_S3_train, 'S3 MAPE' = MAPE_S3_train,
MAPE_AVG_train = MAPE_AVG_train)
#sort model from most accurate to least accurate based on MAPE
accuracy.table0 %>% arrange(MAPE_AVG_train)
#As explained before, M4 is the most accurate one with respect to the trainning data.
#Metrics support this statement.
#Evaluation Metrics for Testing Sets
RMSE_S1 = c(sqrt(mean((scenario1$M0residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M1residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M2residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M3residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M4residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)))
MAPE_S1 = c(mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M0[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M1[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M2[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M3[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M4[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]), na.rm = TRUE))
RMSE_S2 = c(sqrt(mean((scenario2$M0residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M1residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M2residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M3residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M4residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)))
MAPE_S2 = c(mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M0[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M1[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M2[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M3[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M4[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]), na.rm = TRUE))
RMSE_S3 = c(sqrt(mean((scenario3$M0residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M1residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M2residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M3residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M4residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)))
MAPE_S3 = c(mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M0[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M1[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M2[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M3[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M4[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]), na.rm = TRUE))
#create evaluation table
accuracy.table1 = data.frame('S1 MAPE' = MAPE_S1,
'S2 MAPE' = MAPE_S2,
'S3 MAPE' = MAPE_S3)
at1 = as.matrix(accuracy.table1)
MAPE_AVG = c(rowMeans(at1))
MAPE_AVG
ModelID = paste("M", 0:4, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1,
'S1 MAPE' = MAPE_S1,
'S2 RMSE' = RMSE_S2, 'S2 MAPE' = MAPE_S2,
'S3 RMSE' = RMSE_S3, 'S3 MAPE' = MAPE_S3,
MAPE_AVG = MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
tsdisplay(Model$residuals,lag.max=60)
Box.test(Model$residuals)
Deployment:
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
#Since the last model is the final model I am going to store fitted/predicted values
# on training set + forecast on testing sets in column Model and residuals in column Modelresiduals
#Now we create columns M4 and M4residuals and fill them with NAs
data_monthly$Model = NA
data_monthly$Modelresiduals = NA
data_monthly$Model[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$fitted.values
data_monthly$Modelresiduals[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$residuals
#Since lags are included we need to create a loop to calculate predictions
i = dim(data_monthly)[1]-12+1 # First testing observation number
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,])
for(i in (dim(data_monthly)[1]-12+1):(dim(data_monthly)[1])){
data_monthly$VariableLag1[i] = ifelse(is.na(data_monthly$Variable[i-1]), data_monthly$Model[i-1], data_monthly$Variable[i-1])
data_monthly$VariableLag2[i] = ifelse(is.na(data_monthly$Variable[i-2]), data_monthly$Model[i-2], data_monthly$Variable[i-2])
data_monthly$VariableLag10[i] = ifelse(is.na(data_monthly$Variable[i-10]), data_monthly$Model[i-10], data_monthly$Variable[i-10])
data_monthly$VariableLag12[i] = ifelse(is.na(data_monthly$Variable[i-12]), data_monthly$Model[i-12], data_monthly$Variable[i-12])
data_monthly$VariableLag24[i] = ifelse(is.na(data_monthly$Variable[i-24]), data_monthly$Model[i-24], data_monthly$Variable[i-24])
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,], interval='prediction')
}
data_monthly$Modelresiduals = data_monthly$Variable - data_monthly$Model
data_monthly$Model
#Deployment:
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
#Since the last model is the final model I am going to store fitted/predicted values
# on training set + forecast on testing sets in column Model and residuals in column Modelresiduals
#Now we create columns M4 and M4residuals and fill them with NAs
data_monthly$Model = NA
data_monthly$Modelresiduals = NA
data_monthly$Model[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$fitted.values
data_monthly$Modelresiduals[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$residuals
#Since lags are included we need to create a loop to calculate predictions
i = dim(data_monthly)[1]-12+1 # First testing observation number
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,])
for(i in (dim(data_monthly)[1]-12+1):(dim(data_monthly)[1])){
data_monthly$VariableLag1[i] = ifelse(is.na(data_monthly$Variable[i-1]), data_monthly$Model[i-1], data_monthly$Variable[i-1])
data_monthly$VariableLag2[i] = ifelse(is.na(data_monthly$Variable[i-2]), data_monthly$Model[i-2], data_monthly$Variable[i-2])
data_monthly$VariableLag10[i] = ifelse(is.na(data_monthly$Variable[i-10]), data_monthly$Model[i-10], data_monthly$Variable[i-10])
data_monthly$VariableLag12[i] = ifelse(is.na(data_monthly$Variable[i-12]), data_monthly$Model[i-12], data_monthly$Variable[i-12])
data_monthly$VariableLag24[i] = ifelse(is.na(data_monthly$Variable[i-24]), data_monthly$Model[i-24], data_monthly$Variable[i-24])
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,], interval='prediction')
}
data_monthly$Modelresiduals = data_monthly$Variable - data_monthly$Model
data_monthly$Model
data_monthly %>% ggplot(aes(x = Date, y = Variable, color = Set))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "black") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "black") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "black", size=0.5) +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "black", size=0,5) +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "grey") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
#geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
#geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
##geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
data_monthly %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = Model), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
dim(data_monthly$Variable)
dim(data_monthly)[1]
data_monthly$Model
predict(Model, newdata = data_monthly[i,], interval='prediction'
predict(Model, newdata = data_monthly[i,], interval='prediction'
predict(Model, newdata = data_monthly[i,], interval='prediction')
i = dim(data_monthly)[1]
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,])
for(i in (dim(data_monthly)[1]):(dim(data_monthly)[1]+12)){
data_monthly$VariableLag1[i] = ifelse(is.na(data_monthly$Variable[i-1]), data_monthly$Model[i-1], data_monthly$Variable[i-1])
data_monthly$VariableLag2[i] = ifelse(is.na(data_monthly$Variable[i-2]), data_monthly$Model[i-2], data_monthly$Variable[i-2])
data_monthly$VariableLag10[i] = ifelse(is.na(data_monthly$Variable[i-10]), data_monthly$Model[i-10], data_monthly$Variable[i-10])
data_monthly$VariableLag12[i] = ifelse(is.na(data_monthly$Variable[i-12]), data_monthly$Model[i-12], data_monthly$Variable[i-12])
data_monthly$VariableLag24[i] = ifelse(is.na(data_monthly$Variable[i-24]), data_monthly$Model[i-24], data_monthly$Variable[i-24])
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,], interval='prediction')
}
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
#Since lags are included we need to create a loop to calculate predictions
i = dim(data_monthly)[1]
predict(Model, newdata = data_monthly[i,12], interval='prediction')
predict(Model, newdata = data_monthly[i,], interval='prediction')
data_monthly[i]
data_monthly$Model[i]
predict(Model, newdata = data_monthly[i,], interval='prediction')
dim(data_monthly)[1]
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
data_monthly$Model = NA
data_monthly$Modelresiduals = NA
data_monthly$Model[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$fitted.values
data_monthly$Modelresiduals[!is.na(data_monthly$Variable) &!is.na(data_monthly$VariableLag1) & !is.na(data_monthly$VariableLag2) &
!is.na(data_monthly$VariableLag10) & !is.na(data_monthly$VariableLag12)
& !is.na(data_monthly$VariableLag24)] = Model$residuals
data_monthly$Model[i]
data_monthly$Model[i+1] = predict(Model, newdata = data_monthly[i+1,], interval='prediction')
i = dim(data_monthly)[1]
data_monthly$Model[i] = predict(Model, newdata = data_monthly[i,])
for(i in range(12){
data_monthly$VariableLag1[i] = ifelse(is.na(data_monthly$Variable[i-1]), data_monthly$Model[i-1], data_monthly$Variable[i-1])
data_monthly$VariableLag2[i] = ifelse(is.na(data_monthly$Variable[i-2]), data_monthly$Model[i-2], data_monthly$Variable[i-2])
data_monthly$VariableLag10[i] = ifelse(is.na(data_monthly$Variable[i-10]), data_monthly$Model[i-10], data_monthly$Variable[i-10])
data_monthly$VariableLag12[i] = ifelse(is.na(data_monthly$Variable[i-12]), data_monthly$Model[i-12], data_monthly$Variable[i-12])
data_monthly$VariableLag24[i] = ifelse(is.na(data_monthly$Variable[i-24]), data_monthly$Model[i-24], data_monthly$Variable[i-24])
data_monthly$Pred[i] = predict(Model, newdata = data_monthly[i,], interval='prediction')
}
for(i in 1:12){
data_monthly$VariableLag1[i] = ifelse(is.na(data_monthly$Variable[i-1]), data_monthly$Model[i-1], data_monthly$Variable[i-1])
data_monthly$VariableLag2[i] = ifelse(is.na(data_monthly$Variable[i-2]), data_monthly$Model[i-2], data_monthly$Variable[i-2])
data_monthly$VariableLag10[i] = ifelse(is.na(data_monthly$Variable[i-10]), data_monthly$Model[i-10], data_monthly$Variable[i-10])
data_monthly$VariableLag12[i] = ifelse(is.na(data_monthly$Variable[i-12]), data_monthly$Model[i-12], data_monthly$Variable[i-12])
data_monthly$VariableLag24[i] = ifelse(is.na(data_monthly$Variable[i-24]), data_monthly$Model[i-24], data_monthly$Variable[i-24])
data_monthly$Pred[i] = predict(Model, newdata = data_monthly[i,], interval='prediction')
}
str(data_monthly)
data_monthly$VariableLag1 = lag(data_monthly$Variable, 1)
data_monthly$VariableLag2 = lag(data_monthly$Variable, 2)
data_monthly$VariableLag10 = lag(data_monthly$Variable, 10)
data_monthly$VariableLag12 = lag(data_monthly$Variable, 12)
data_monthly$VariableLag24 = lag(data_monthly$Variable, 24)
Model = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV +
VariableLag1 + VariableLag2 + VariableLag10 + VariableLag12 + VariableLag24,
data = data_monthly)
summary(Model)
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 August',
'2021 August',
'2021 August',
'2021 August',
'2021 August',
'2021 August',),
'S2 MAPE' = MAPE_S2,
'S3 MAPE' = MAPE_S3)
predict(Model, newdata = data_monthly[i,], interval='prediction')
#Since lags are included we need to create a loop to calculate predictions
i = dim(data_monthly)[1]
predict(Model, newdata = data_monthly[i+1,], interval='prediction')
predict(Model, newdata = data_monthly[i,], interval='prediction')
data_monthly$Variable[i]
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July',),
'Champion Model Forecast' = c(),
'95% lower bound' = c(),
'95% upper bound' = c())
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July'),
'Champion Model Forecast' = c(),
'95% lower bound' = c(),
'95% upper bound' = c())
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July'),
'Champion Model Forecast' = c(),
'95% lower bound' = c(),
'95% upper bound' = c())
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July'),
'Champion Model Forecast' = c(rep(NA)),
'95% lower bound' = c(),
'95% upper bound' = c())
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July'),
'Champion Model Forecast' = c(rep(NA)),
'95% lower bound' = c(rep(NA)),
'95% upper bound' = c(rep(NA)))
forecast.table
predict(Model, newdata = forecast.table[i,], interval='prediction')[1]
#create table
forecast.table = data.frame('Month' = c('2021 August',
'2021 September',
'2021 October',
'2021 November',
'2021 December',
'2022 January',
'2022 February',
'2022 March',
'2022 April',
'2022 May',
'2022 June',
'2022 July'),
'Variable' = c(rep(NA)),
'95% lower bound' = c(rep(NA)),
'95% upper bound' = c(rep(NA)))
predict(Model, newdata = data_monthly[i,], interval='prediction')[1]
predict(Model, newdata = forecast.table, interval='prediction')[1]
#create table
forecast.table = data.frame('Trend' = c(rep(1:12))),
'Champion Model Forecast' = c(rep(NA)),
'95% lower bound' = c(rep(NA)),
'95% upper bound' = c(rep(NA)))
#create table
forecast.table = data.frame('Trend' = c(rep(1:12)),
'Champion Model Forecast' = c(rep(NA)),
'95% lower bound' = c(rep(NA)),
'95% upper bound' = c(rep(NA)))
predict(Model, newdata = forecast.table, interval='prediction')[1]
pred = predict(Model, interval='prediction')
pred = predict(Model, interval='prediction')
pred = predict(Model, newdata = data_monthly, interval='prediction')
pred
pred == data_monthly
#create table
forecast.table = data.frame('Trend' = c(rep(227:(227+12))),
'Champion Model Forecast' = c(rep(NA)),
'95% lower bound' = c(rep(NA)),
'95% upper bound' = c(rep(NA)))
predict(Model, newdata = forecast.table, interval='prediction')
