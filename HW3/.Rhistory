geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
#M1
dim(train1)
#Let's capture trend
dim(data_monthly)
M1S1 = lm(Variable ~ Trend, data = train1)
summary(M1S1)
test1$M1 = predict(M1S1, newdata = test1)
test1$M1residuals = test1$Variable - test1$M1
test1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
M1S2 = lm(Variable ~ Trend, data = train2)
summary(M1S2)
test2$M1 = predict(M1S2, newdata = test2)
test2$M1residuals = test2$Variable - test2$M1
test2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
train3 = train3 %>% mutate(Trend = 1:207) #let's capture trend
M1S3 = lm(Variable ~ Trend, data = train3)
summary(M1S3)
test3$M1 = predict(M1S3, newdata = test3)
test3$M1residuals = test3$Variable - test3$M1
test3 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
#now let's create the sets for the 3 scenarios
scenario1 = subset(data_monthly, Year<=2008)
scenario1$Train = scenario1$Variable
scenario1 %>% head
scenario1$Train == scenario1$Variable
scenario1 = subset(data_monthly, Year<=2008)
scenario1$Train = scenario1$Variable
scenario1$Train[(dim(scenario1)[1]-12+1) : dim(scenario1)[1]] = NA
scenario1 %>% head
scenario1
scenario1$Train
scenario1$Variable
#M0: a baseline model without explanatory variables,
# built using the simplest regression model
# y = b0 + epsilon
# & using Variable as the KPI
M0S1 = lm(Train ~ 1, data = scenario1) #S1 stands for Scenario 1
summary(M0S1)
scenario1$M0 = predict(M0S1, newdata = scenario1)
scenario1$M0residuals = scenario1$Variable - scenario1$M0
test1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
M0S2 = lm(Train ~ 1, data = scenario2) #S2 stands for Scenario 2
summary(M0S2)
scenario2$M0 = predict(M0S2, newdata = scenario2)
scenario2$M0residuals = scenario2$Variable - scenario2$M0
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario2 = subset(data_monthly, Year<=2019)
scenario2$Train = scenario2$Variable
scenario2$Train[(dim(scenario2)[1]-12+1) : dim(scenario2)[1]] = NA
scenario3 = subset(data_monthly, Year<=2020)
scenario3$Train = scenario3$Variable
scenario3$Train[(dim(scenario3)[1]-12+1) : dim(scenario3)[1]] = NA
#M0: a baseline model without explanatory variables,
# built using the simplest regression model
# y = b0 + epsilon
# & using Variable as the KPI
M0S1 = lm(Train ~ 1, data = scenario1) #S1 stands for Scenario 1
summary(M0S1)
scenario1$M0 = predict(M0S1, newdata = scenario1)
scenario1$M0residuals = scenario1$Variable - scenario1$M0
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
M0S2 = lm(Train ~ 1, data = scenario2) #S2 stands for Scenario 2
summary(M0S2)
scenario2$M0 = predict(M0S2, newdata = scenario2)
scenario2$M0residuals = scenario2$Variable - scenario2$M0
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
M0S3 = lm(Train ~ 1, data = scenario3) #S3 stands for Scenario 3
summary(M0S3)
scenario3$M0 = predict(M0S3, newdata = scenario3)
scenario3$M0residuals = scenario3$Variable - scenario3$M0
scenario3 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
scale_x_date(date_labels = "%Y-%m-%d")
M1S1 = lm(Train ~ Trend, data = scenario1)
summary(M1S1)
scenario1$M1 = predict(M1S1, newdata = scenario1)
scenario1$M1residuals = scenario1$Variable - scenario1$M1
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
M1S2 = lm(Train ~ Trend, data = scenario2)
summary(M1S2)
scenario2$M1 = predict(M1S2, newdata = scenario2)
scenario2$M1residuals = scenario2$Variable - scenario2$M1
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
M1S3 = lm(Train ~ Trend, data = scenario3)
summary(M1S3)
scenario3$M1 = predict(M1S3, newdata = scenario3)
scenario3$M1residuals = scenario3$Variable - scenario3$M1
scenario3 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
scale_x_date(date_labels = "%Y-%m-%d")
#M2
# let's capture and model seasonality - this model will capture only seasonal component
# we have monthly data with annual seasonality (12 points per cycle)
# let's use dummy variable
scenario1 %>% group_by(Month) %>% summarise(mean(Variable))
M2S1 = lm(Train ~ JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario1) #to include intercept one month should not be included
summary(M2S1)
scenario1$M2 = M2S1$fitted.values
scenario1$M2 = predict(M2S1, newdata = scenario1)
scenario1$M2residuals = scenario1$Variable - scenario1$M2
sceario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario2 %>% group_by(Month) %>% summarise(mean(Variable))
M2S2 = lm(Train ~ JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario2) #to include intercept one month should not be included
summary(M2S2)
scenario2$M2 = predict(M2S1, newdata = scenario2)
scenario2$M2residuals = scenario2$Variable - scenario2$M2
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
scale_x_date(date_labels = "%Y-%m-%d")
scenario3 %>% group_by(Month) %>% summarise(mean(Variable))
M2S3 = lm(Train ~ JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario3) #to include intercept one month should not be included
summary(M2S3)
scenario3$M2 = predict(M2S1, newdata = scenario3)
scenario3$M2residuals = scenario3$Variable - scenario3$M2
scenario3 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S1 = lm(Train ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario1)
summary(M3S1)
scenario1$M3 = predict(M3S1, newdata = scenario1)
scenario1$M3residuals = scenario1$Variable - scenario1$M3
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S2 = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = train2)
summary(M3S2)
scenario2$M3 = predict(M3S2, newdata = scenario2)
scenario2$M3residuals = scenario2$Variable - scenario2$M3
train2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S2 = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario2)
summary(M3S2)
scenario2$M3 = predict(M3S2, newdata = scenario2)
scenario2$M3residuals = scenario2$Variable - scenario2$M3
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S1 = lm(Train ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario1)
summary(M3S1)
scenario1$M3 = predict(M3S1, newdata = scenario1)
scenario1$M3residuals = scenario1$Variable - scenario1$M3
scenario1 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S2 = lm(Variable ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario2)
summary(M3S2)
scenario2$M3 = predict(M3S2, newdata = scenario2)
scenario2$M3residuals = scenario2$Variable - scenario2$M3
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S2 = lm(Train ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario2)
summary(M3S2)
scenario2$M3 = predict(M3S2, newdata = scenario2)
scenario2$M3residuals = scenario2$Variable - scenario2$M3
scenario2 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
M3S3 = lm(Train ~ Trend + JAN + FEB + MAR + APR + MAY + JUN + JUL + AUG + SEP + OCT + NOV,
data = scenario3)
summary(M3S3)
scenario3$M3 = predict(M3S3, newdata = scenario3)
scenario3$M3residuals = scenario3$Variable - scenario3$M3
scenario3 %>% ggplot(aes(x = Date, y = Variable))+
geom_line()+ theme_bw() +
geom_line(aes(x = Date, y = M0), col = "blue") +
geom_line(aes(x = Date, y = M1), col = "red") +
geom_line(aes(x = Date, y = M2), col = "green") +
geom_line(aes(x = Date, y = M3), col = "orange") +
scale_x_date(date_labels = "%Y-%m-%d")
#Evaluation Metrics for Training Sets
RMSE_S1_train = c(sqrt(mean((scenario1$M0residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M1residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M2residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M3residuals[1:(dim(data)[1]-12)])^2)))
MAPE_S1_train = c(mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M0[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M1[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M2[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M3[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])))
RMSE_S2_train = c(sqrt(mean((scenario2$M0residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario2$M1residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario2$M2residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario2$M3residuals[1:(dim(data)[1]-12)])^2)))
MAPE_S2_train = c(mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M0[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M1[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M2[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M3[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])))
RMSE_S3_train = c(sqrt(mean((scenario3$M0residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario3$M1residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario3$M2residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario3$M3residuals[1:(dim(data)[1]-12)])^2)))
MAPE_S3_train = c(mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M0[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M1[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M2[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M3[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])))
#create evaluation table
accuracy.table = data.frame('S1 MAPE' = MAPE_S1_train,
'S2 MAPE' = MAPE_S2_train,
'S3 MAPE' = MAPE_S3_train)
at = as.matrix(accuracy.table)
MAPE_AVG = c(rowMeans(at))
MAPE_AVG
ModelID = paste("M", 0:3, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1_train,
'S1 MAPE' = MAPE_S1_train,
'S2 RMSE' = RMSE_S2_train, 'S2 MAPE' = MAPE_S2_train,
'S3 RMSE' = RMSE_S3_train, 'S3 MAPE' = MAPE_S3_train,
MAPE_AVG = MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
RMSE_S1_train = c(sqrt(mean((scenario1$M0residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M1residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M2residuals[1:(dim(data)[1]-12)])^2)),
sqrt(mean((scenario1$M3residuals[1:(dim(data)[1]-12)])^2)))
RMSE_S1_train
scenario1$M0residuals
scenario1$M0residuals[1:(dim(data)[1]-12)]
RMSE_S1_train = c(sqrt(mean((scenario1$M0residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M1residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M2residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M3residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)))
RMSE_S1_train
RMSE_S1_train = c(sqrt(mean((scenario1$M0residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M1residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M2residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M3residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)))
MAPE_S1_train = c(mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M0[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M1[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M2[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])),
mean(abs((scenario1$Variable[1:(dim(scenario1)[1]-12)] -
scenario1$M3[1:(dim(scenario1)[1]-12)]) /
scenario1$Variable[1:(dim(scenario1)[1]-12)])))
RMSE_S2_train = c(sqrt(mean((scenario2$M0residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M1residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M2residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M3residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)))
MAPE_S2_train = c(mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M0[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M1[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M2[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])),
mean(abs((scenario2$Variable[1:(dim(scenario2)[1]-12)] -
scenario2$M3[1:(dim(scenario2)[1]-12)]) /
scenario2$Variable[1:(dim(scenario2)[1]-12)])))
RMSE_S3_train = c(sqrt(mean((scenario3$M0residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M1residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M2residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M3residuals[1:(dim(data)[1]-12)])^2, na.rm = TRUE)))
MAPE_S3_train = c(mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M0[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M1[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M2[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])),
mean(abs((scenario3$Variable[1:(dim(scenario3)[1]-12)] -
scenario3$M3[1:(dim(scenario3)[1]-12)]) /
scenario3$Variable[1:(dim(scenario3)[1]-12)])))
#create evaluation table
accuracy.table = data.frame('S1 MAPE' = MAPE_S1_train,
'S2 MAPE' = MAPE_S2_train,
'S3 MAPE' = MAPE_S3_train)
at = as.matrix(accuracy.table)
MAPE_AVG = c(rowMeans(at))
MAPE_AVG
ModelID = paste("M", 0:3, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1_train,
'S1 MAPE' = MAPE_S1_train,
'S2 RMSE' = RMSE_S2_train, 'S2 MAPE' = MAPE_S2_train,
'S3 RMSE' = RMSE_S3_train, 'S3 MAPE' = MAPE_S3_train,
MAPE_AVG = MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
accuracy.table0 = data.frame('S1 MAPE' = MAPE_S1_train,
'S2 MAPE' = MAPE_S2_train,
'S3 MAPE' = MAPE_S3_train)
at0 = as.matrix(accuracy.table0)
MAPE_AVG_train = c(rowMeans(at0))
MAPE_AVG_train
ModelID = paste("M", 0:3, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1_train,
'S1 MAPE' = MAPE_S1_train,
'S2 RMSE' = RMSE_S2_train, 'S2 MAPE' = MAPE_S2_train,
'S3 RMSE' = RMSE_S3_train, 'S3 MAPE' = MAPE_S3_train,
MAPE_AVG_train = MAPE_AVG_train)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG_train)
#create evaluation table
accuracy.table0 = data.frame('S1 MAPE' = MAPE_S1_train,
'S2 MAPE' = MAPE_S2_train,
'S3 MAPE' = MAPE_S3_train)
at0 = as.matrix(accuracy.table0)
MAPE_AVG_train = c(rowMeans(at0))
MAPE_AVG_train
ModelID = paste("M", 0:3, sep = "")
accuracy.table0 = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1_train,
'S1 MAPE' = MAPE_S1_train,
'S2 RMSE' = RMSE_S2_train, 'S2 MAPE' = MAPE_S2_train,
'S3 RMSE' = RMSE_S3_train, 'S3 MAPE' = MAPE_S3_train,
MAPE_AVG_train = MAPE_AVG_train)
#sort model from most accurate to least accurate based on MAPE
accuracy.table0 %>% arrange(MAPE_AVG_train)
#Evaluation Metrics for Testing Sets
RMSE_S1 = c(sqrt(mean((scenario1$M0residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M1residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M2residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario1$M3residuals[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])^2, na.rm = TRUE)))
MAPE_S1 = c(mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M0[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M1[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M2[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])),
mean(abs((scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]] -
scenario1$M3[(dim(scenario1)[1]-12+1):dim(scenario1)[1]]) /
scenario1$Variable[(dim(scenario1)[1]-12+1):dim(scenario1)[1]])))
RMSE_S2 = c(sqrt(mean((scenario2$M0residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M1residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M2residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario2$M3residuals[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])^2, na.rm = TRUE)))
MAPE_S2 = c(mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M0[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M1[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M2[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])),
mean(abs((scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]] -
scenario2$M3[(dim(scenario2)[1]-12+1):dim(scenario2)[1]]) /
scenario2$Variable[(dim(scenario2)[1]-12+1):dim(scenario2)[1]])))
RMSE_S3 = c(sqrt(mean((scenario3$M0residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M1residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M2residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)),
sqrt(mean((scenario3$M3residuals[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])^2, na.rm = TRUE)))
MAPE_S3 = c(mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M0[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M1[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M2[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])),
mean(abs((scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]] -
scenario3$M3[(dim(scenario3)[1]-12+1):dim(scenario3)[1]]) /
scenario3$Variable[(dim(scenario3)[1]-12+1):dim(scenario3)[1]])))
#create evaluation table
accuracy.table1 = data.frame('S1 MAPE' = MAPE_S1,
'S2 MAPE' = MAPE_S2,
'S3 MAPE' = MAPE_S3)
at1 = as.matrix(accuracy.table1)
MAPE_AVG = c(rowMeans(at1))
MAPE_AVG
ModelID = paste("M", 0:3, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1,
'S1 MAPE' = MAPE_S1,
'S2 RMSE' = RMSE_S2, 'S2 MAPE' = MAPE_S2,
'S3 RMSE' = RMSE_S3, 'S3 MAPE' = MAPE_S3,
MAPE_AVG = MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table0 %>% arrange(MAPE_AVG_train)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
accuracy.table1 = data.frame('S1 MAPE' = MAPE_S1,
'S2 MAPE' = MAPE_S2)
at1 = as.matrix(accuracy.table1)
MAPE_AVG = c(rowMeans(at1))
MAPE_AVG
ModelID = paste("M", 0:3, sep = "")
accuracy.table = data.frame(ModelID = ModelID, 'S1 RMSE' = RMSE_S1,
'S1 MAPE' = MAPE_S1,
'S2 RMSE' = RMSE_S2, 'S2 MAPE' = MAPE_S2,
'S3 RMSE' = RMSE_S3, 'S3 MAPE' = MAPE_S3,
MAPE_AVG = MAPE_AVG)
#sort model from most accurate to least accurate based on MAPE
accuracy.table %>% arrange(MAPE_AVG)
